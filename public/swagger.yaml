openapi: 3.0.1
info:
  title: COMURT V2
  description: ''
  version: 1.0.0
tags:
  - name: Authentication
paths:
  /api/v1/login:
    post:
      summary: login
      deprecated: false
      description: >-
        Renovação de sessão:

        Se o tempo restante for menor que 600 segundos, o token é renovado
        retornando o header X-Renewed-Token
      tags:
        - Authentication
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: pass
              required:
                - email
                - password
            example:
              email: tp@conect.app
              password: '123456'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                required:
                  - token
          headers: {}
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    type: integer
                  messages:
                    type: object
                    properties:
                      email:
                        type: string
                      passwor:
                        type: string
                    required:
                      - email
                      - passwor
                required:
                  - status
                  - error
                  - messages
          headers: {}
      security: []
  /api/v1/magiclink:
    post:
      summary: Magic Link
      deprecated: false
      description: Limite de 5 requisições por hora nessa rota
      tags:
        - Authentication
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                magiclink:
                  type: string
              required:
                - magiclink
            example:
              magiclink: 613d3552410c0cf1d93faef5f2543fb13bae20e7f4beade3994495f70d5ef3b4
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                required:
                  - token
          headers: {}
        '404':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    type: integer
                  messages:
                    type: object
                    properties:
                      error:
                        type: string
                    required:
                      - error
                required:
                  - status
                  - error
                  - messages
          headers: {}
      security: []
  /api/v1/recover:
    post:
      summary: recover
      deprecated: false
      description: ''
      tags:
        - Authentication
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
            example:
              email: tp@conect.app
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      token:
                        type: string
                      magicLink:
                        type: string
                      baseUrl:
                        type: string
                      company:
                        type: string
                    required:
                      - name
                      - email
                      - token
                      - magicLink
                      - baseUrl
                      - company
                required:
                  - message
                  - data
          headers: {}
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    type: integer
                  messages:
                    type: object
                    properties:
                      email:
                        type: string
                    required:
                      - email
                required:
                  - status
                  - error
                  - messages
          headers: {}
      security: []
    put:
      summary: Update password
      deprecated: false
      description: >-
        Após a atualização ou criação de uma nova senha, o token de acesso é
        automaticamente renovado.


        As regras e validações sobre a complexidade e o tamanho da senha devem
        ser implementadas no frontend, pois o backend aceita senhas de qualquer
        tamanho ou nível de dificuldade.


        Nenhuma senha é armazenada de forma descriptografada no banco de dados.
        Não é possível verificar ou recuperar senhas anteriores, pois apenas um
        hash seguro da senha é salvo. Esse hash é irreversível e não pode ser
        convertido de volta para a senha original.
      tags:
        - Authentication
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                token:
                  type: string
              required:
                - password
                - token
            example:
              password: '123456'
              token: c8322150a0c6b803e2207e22a48b9803a09227ee90cbe06a1765aabb023
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
          headers: {}
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    type: integer
                  messages:
                    type: object
                    properties:
                      error:
                        type: string
                    required:
                      - error
                required:
                  - status
                  - error
                  - messages
          headers: {}
      security: []
  /api/v1/logout:
    get:
      summary: logout
      deprecated: false
      description: ''
      tags:
        - Authentication
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
          headers: {}
        '401':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    type: integer
                  messages:
                    type: object
                    properties:
                      error:
                        type: string
                    required:
                      - error
                required:
                  - status
                  - error
                  - messages
          headers: {}
      security:
        - bearer: []
  /:
    get:
      summary: Server Status
      deprecated: false
      description: ''
      tags:
        - Authentication
      parameters:
        - name: server
          in: query
          description: ''
          required: false
          example: 'true'
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  version:
                    type: string
                  memory:
                    type: string
                  load:
                    type: string
                  docs:
                    type: string
                required:
                  - status
                  - version
                  - memory
                  - load
                  - docs
          headers: {}
      security: []
components:
  schemas: {}
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
servers: []
